(load! "rad/prelude/doc.rad")
(load! "rad/prelude/should-be.rad")
(load! "rad/prelude/io.rad")
(load! "rad/prelude/bool.rad")
(load! "rad/prelude/recursion.rad")
(load! "rad/prelude/list.rad")
(load! "rad/prelude/dict.rad")
(load! "rad/prelude/ref.rad")
(load! "rad/prelude/lens.rad")

(define pure-prelude-files
  (list
   "rad/prelude/doc.rad"
   "rad/prelude/pure-should-be.rad"
   "rad/prelude/recursion.rad"
   "rad/prelude/bool.rad"
   "rad/prelude/list.rad"
   "rad/prelude/dict.rad"
   "rad/prelude/ref.rad"
   "rad/prelude/lens.rad"
   ))

(document 'pure-prelude-files
          '()
          "List of files which together define the pure prelude.")

(define pure-prelude-code
  (read
   (string-append
    "(do "
    (apply string-append
           (map (lambda (f) (read-file! f)) pure-prelude-files))
    ")")))

(document 'pure-prelude-code
          '()
          "The pure prelude.")

(define send-prelude!
  (lambda (chain-id)
    (send! chain-id pure-prelude-code)))

(document 'send-prelude!
          '(("chain-id" string))
"Send the pure prelude to a chain.")

;; The Repl

(define _initial_prompt-text
  "Welcome to radicle. Type (help) for help.")

(define help (lambda ()
  "radicle is a LISP-like language intendended for programming chains, and
  interacting with those chains.

  Type (doc <name>) for further documentation of <name>."))
